% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matching_functions.R
\name{match_person_to_grouped_data}
\alias{match_person_to_grouped_data}
\title{Match a Person to Grouped Data}
\usage{
match_person_to_grouped_data(
  FN,
  LN,
  data,
  FN_column = "FN",
  LN_column = "LN",
  UPI_column = "UPI",
  group_column = NULL,
  group_value = NULL,
  max_dist = 2,
  method = "osa",
  show_all_fuzzy = FALSE,
  ...
)
}
\arguments{
\item{FN}{First name}

\item{LN}{Last name}

\item{data}{Data frame containing name, UPI, and grouping columns}

\item{FN_column}{Column name for first names (default: "FN")}

\item{LN_column}{Column name for surnames (default: "LN")}

\item{UPI_column}{Column name for Unique Person Identifier (default: "UPI")}

\item{group_column}{(Optional) column name for grouping}

\item{group_value}{(Optional) value to filter by in the grouping column}

\item{max_dist}{Max string distance for fuzzy match (default: 2)}

\item{method}{Method for string distance (default: "osa")}

\item{show_all_fuzzy}{Show all fuzzy matches or just the best (default: FALSE)}

\item{...}{Additional arguments passed to `clean_name()`}
}
\value{
A list with UPI, matching row(s), and a message
}
\description{
Attempts to match a person (first and last name) to a row in a data frame,
optionally within a specific grouping (e.g., Department, Team).
}
\examples{
# Example data: Botanists grouped by expedition
botanists_grouped <- data.frame(
  FN = c("Carl", "Joseph", "Alexander", "Agnes", "Janet", "George"),
  LN = c("Linnaeus", "Banks", "von Humboldt", "Arber", "Browne", "Bentham"),
  UPI = c("CL001", "JB002", "AH003", "AA004", "JB003", "GB004"),
  Expedition = c("Sweden", "Endeavour", "South America", "UK", "UK", "Australia"),
  stringsAsFactors = FALSE
)

# Exact match within correct group
match_person_to_grouped_data("Carl", "Linnaeus", botanists_grouped, group_value = "Sweden")

# Will match Joseph Banks only within the "Endeavour" expedition
match_person_to_grouped_data("joseph", "banks", botanists_grouped, group_value = "Endeavour")

# Swapped names still work within group
match_person_to_grouped_data("von Humboldt", "Alexander",
 botanists_grouped, group_value = "South America")

# No match if group is incorrect, even if name is present elsewhere
match_person_to_grouped_data("George", "Bentham",
 botanists_grouped, group_value = "UK")  # returns NA

}
